import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
import re
from nltk.corpus import stopwords

def cargar_stopwords_espanol():
    try:
        return set(stopwords.words('spanish'))
    except LookupError:
        import nltk
        nltk.download('stopwords')
        return set(stopwords.words('spanish'))
    except Exception as e:
        print(f"Error al cargar stopwords: {e}")
        return set()

def configurar_estilo_visual():
    try:
        plt.style.use('seaborn-v0_8-darkgrid')
        sns.set(rc={'figure.figsize': (12, 6)})
    except Exception as e:
        print(f"Error al configurar estilo visual: {e}")

def cargar_datos_limpios(path_archivo: str = "mundial_tweets.csv") -> pd.DataFrame:
    try:
        datos = pd.read_csv(path_archivo)
        datos["Date"] = pd.to_datetime(datos["Date"], errors="coerce")
        datos["Fecha"] = datos["Date"].dt.date
        datos["Hora"] = datos["Date"].dt.time
        return datos.drop(columns=["Date"])
    except FileNotFoundError:
        print(f"Archivo no encontrado: {path_archivo}")
    except Exception as e:
        print(f"Error al cargar o procesar los datos: {e}")
    return pd.DataFrame()

def extraer_palabras_frecuentes(textos: pd.Series, stopwords_es: set, longitud_minima: int = 4, top: int = 20) -> pd.DataFrame:
    try:
        texto_completo = ' '.join(textos.dropna()).lower()
        palabras = re.findall(r'\b\w+\b', texto_completo)
        palabras_filtradas = [palabra for palabra in palabras if palabra not in stopwords_es and len(palabra) >= longitud_minima]
        frecuencia_palabras = Counter(palabras_filtradas).most_common(top)
        resultado = pd.DataFrame(frecuencia_palabras, columns=["Palabra", "Frecuencia"])
        resultado["Porcentaje"] = resultado["Frecuencia"] / resultado["Frecuencia"].sum() * 100
        return resultado
    except Exception as e:
        print(f"Error al extraer palabras frecuentes: {e}")
        return pd.DataFrame()

def mostrar_grafico_palabras(df_frecuencias: pd.DataFrame):
    try:
        ax = df_frecuencias.plot(kind="barh", x="Palabra", y="Frecuencia", legend=False, color="skyblue")
        for indice, (frecuencia, porcentaje) in enumerate(zip(df_frecuencias["Frecuencia"], df_frecuencias["Porcentaje"])):
            plt.text(frecuencia + 1, indice, f'{frecuencia} ({porcentaje:.1f}%)', va='center')
        plt.title("Palabras más comunes en tweets")
        plt.xlabel("Frecuencia")
        plt.gca().invert_yaxis()
        plt.tight_layout()
        plt.show()
    except Exception as e:
        print(f"Error al mostrar gráfico: {e}")

def imprimir_resumen(df_frecuencias: pd.DataFrame):
    try:
        print("\nPalabras más utilizadas en los tweets:")
        print(df_frecuencias)
    except Exception as e:
        print(f"Error al imprimir resumen: {e}")

if __name__ == "__main__":
    configurar_estilo_visual()
    stopwords_es = cargar_stopwords_espanol()
    tweets_df = cargar_datos_limpios()

    if not tweets_df.empty:
        resumen_palabras = extraer_palabras_frecuentes(tweets_df["Tweet"], stopwords_es)
        if not resumen_palabras.empty:
            mostrar_grafico_palabras(resumen_palabras)
            imprimir_resumen(resumen_palabras)
